service: nft-mint-batch

frameworkVersion: '3'

provider:
  name: aws
  runtime: nodejs20.x
  region: ${opt:region, 'ap-southeast-1'}
  stage: ${opt:stage, 'dev'}
  memorySize: 1024
  timeout: 30
  environment:
    NODE_ENV: ${opt:stage, 'dev'}
    REGION: ${self:provider.region}
  
# vpc:
#   securityGroupIds:
#     - ${ssm:/nft-mint/${self:provider.stage}/security-group-id}
#   subnetIds:
#     - ${ssm:/nft-mint/${self:provider.stage}/subnet-id-1}
#     - ${ssm:/nft-mint/${self:provider.stage}/subnet-id-2}

  iamRoleStatements:
    - Effect: Allow
      Action:
        - dynamodb:Query
        - dynamodb:Scan
        - dynamodb:GetItem
        - dynamodb:PutItem
        - dynamodb:UpdateItem
        - dynamodb:DeleteItem
        - dynamodb:BatchWriteItem
      Resource:
        - !GetAtt OrdersTable.Arn
        - !GetAtt WorkersTable.Arn
    - Effect: Allow
      Action:
        - sqs:SendMessage
        - sqs:ReceiveMessage
        - sqs:DeleteMessage
        - sqs:GetQueueAttributes
        - sqs:ChangeMessageVisibility
      Resource:
        - !GetAtt NftMintQueue.Arn
        - !GetAtt DeadLetterQueue.Arn
    - Effect: Allow
      Action:
        - kms:Decrypt
        - kms:GenerateDataKey
        - kms:Sign
      Resource: "*"
    - Effect: Allow
      Action:
        - sns:Publish
      Resource:
        - !Ref AlertTopic
    - Effect: Allow
      Action:
        - cloudwatch:PutMetricData
      Resource: "*"

plugins:
  - serverless-dotenv-plugin
  - serverless-plugin-typescript
  - serverless-offline

package:
  individually: true
  excludeDevDependencies: true

functions:
  api:
    handler: src/lambda.handler
    events:
      - http:
          path: /
          method: ANY
          cors: true
      - http:
          path: /{proxy+}
          method: ANY
          cors: true
    environment:
      ORDERS_TABLE: !Ref OrdersTable
      WORKERS_TABLE: !Ref WorkersTable
      NFT_MINT_QUEUE_URL: !Ref NftMintQueue
      ALERT_TOPIC_ARN: !Ref AlertTopic

  orderProcessor:
    handler: src/workers/order-processor.handler
    events:
      - sqs:
          arn: !GetAtt NftMintQueue.Arn
          batchSize: 10
          maximumBatchingWindow: 60
    environment:
      ORDERS_TABLE: !Ref OrdersTable
      WORKERS_TABLE: !Ref WorkersTable
      DEAD_LETTER_QUEUE_URL: !Ref DeadLetterQueue
      ALERT_TOPIC_ARN: !Ref AlertTopic

  balanceMonitor:
    handler: src/workers/balance-monitor.handler
    events:
      - schedule: rate(15 minutes)
    environment:
      WORKERS_TABLE: !Ref WorkersTable
      ALERT_TOPIC_ARN: !Ref AlertTopic

resources:
  Resources:
    OrdersTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:service}-${self:provider.stage}-orders
        BillingMode: PAY_PER_REQUEST
        AttributeDefinitions:
          - AttributeName: id
            AttributeType: S
          - AttributeName: status
            AttributeType: S
          - AttributeName: createdAt
            AttributeType: S
        KeySchema:
          - AttributeName: id
            KeyType: HASH
        GlobalSecondaryIndexes:
          - IndexName: StatusCreatedAtIndex
            KeySchema:
              - AttributeName: status
                KeyType: HASH
              - AttributeName: createdAt
                KeyType: RANGE
            Projection:
              ProjectionType: ALL

    WorkersTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:service}-${self:provider.stage}-workers
        BillingMode: PAY_PER_REQUEST
        AttributeDefinitions:
          - AttributeName: id
            AttributeType: S
          - AttributeName: status
            AttributeType: S
        KeySchema:
          - AttributeName: id
            KeyType: HASH
        GlobalSecondaryIndexes:
          - IndexName: StatusIndex
            KeySchema:
              - AttributeName: status
                KeyType: HASH
            Projection:
              ProjectionType: ALL

    NftMintQueue:
      Type: AWS::SQS::Queue
      Properties:
        QueueName: ${self:service}-${self:provider.stage}-nft-mint-queue
        VisibilityTimeout: 300
        MessageRetentionPeriod: 1209600
        RedrivePolicy:
          deadLetterTargetArn: !GetAtt DeadLetterQueue.Arn
          maxReceiveCount: 3

    DeadLetterQueue:
      Type: AWS::SQS::Queue
      Properties:
        QueueName: ${self:service}-${self:provider.stage}-dlq
        MessageRetentionPeriod: 1209600

    AlertTopic:
      Type: AWS::SNS::Topic
      Properties:
        TopicName: ${self:service}-${self:provider.stage}-alerts
        DisplayName: NFT Mint Batch Alerts

    ApiGatewayThrottlingRule:
      Type: AWS::WAFv2::WebACL
      Properties:
        Name: ${self:service}-${self:provider.stage}-throttling
        Scope: REGIONAL
        DefaultAction:
          Allow: {}
        Rules:
          - Name: RateLimit
            Priority: 1
            Statement:
              RateBasedStatement:
                Limit: 2000
                AggregateKeyType: IP
            Action:
              Block: {}
            VisibilityConfig:
              SampledRequestsEnabled: true
              CloudWatchMetricsEnabled: true
              MetricName: ThrottledRequests